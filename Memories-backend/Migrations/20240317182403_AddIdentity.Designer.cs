// <auto-generated />
using System;
using Memories_backend.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Memoriesbackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240317182403_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FileTag", b =>
                {
                    b.Property<Guid>("FilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FilesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("FileTag");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0befa8f6-72d1-4597-9859-95f9413b61fe"),
                            Name = "Edit"
                        },
                        new
                        {
                            Id = new Guid("dd2f2e3d-12a8-4c91-8300-67ecc29c916c"),
                            Name = "Share"
                        },
                        new
                        {
                            Id = new Guid("85925c4e-9e90-4d43-88f0-b1463bb659ad"),
                            Name = "Transfer"
                        },
                        new
                        {
                            Id = new Guid("3e992911-7a79-44eb-a0cd-4c0fe74ba441"),
                            Name = "Create"
                        },
                        new
                        {
                            Id = new Guid("729b090a-63de-41ec-8896-ea8c33cede8e"),
                            Name = "Delete"
                        },
                        new
                        {
                            Id = new Guid("3cfaf018-37d5-49a7-b1f2-4bbcf8f0b181"),
                            Name = "Open"
                        });
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isFolder")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.FileActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("FileId");

                    b.ToTable("FileActivities");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStared")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastOpenedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FileTag", b =>
                {
                    b.HasOne("Memories_backend.Models.Domain.File", null)
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memories_backend.Models.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.File", b =>
                {
                    b.HasOne("Memories_backend.Models.Domain.Category", "Category")
                        .WithMany("Files")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.FileActivity", b =>
                {
                    b.HasOne("Memories_backend.Models.Domain.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Memories_backend.Models.Domain.File", null)
                        .WithMany("FileActivities")
                        .HasForeignKey("FileId");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.FileDetails", b =>
                {
                    b.HasOne("Memories_backend.Models.Domain.File", "File")
                        .WithOne("FileDetails")
                        .HasForeignKey("Memories_backend.Models.Domain.FileDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.Category", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Memories_backend.Models.Domain.File", b =>
                {
                    b.Navigation("FileActivities");

                    b.Navigation("FileDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
